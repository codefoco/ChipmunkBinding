<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ChipmunkBinding</name>
    </assembly>
    <members>
        <member name="T:ChipmunkBinding.Body">
            <summary>
            Mass and moment are ignored when <see cref="T:ChipmunkBinding.BodyType"/> is <see cref="F:ChipmunkBinding.BodyType.Kinematic"/>
            or <see cref="F:ChipmunkBinding.BodyType.Static"/>. Guessing the mass for a body is usually fine, but guessing
            a moment of inertia can lead to a very poor simulation. It’s recommended to use Chipmunk’s
            moment-calculating functions to estimate the moment for you.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Body.Handle">
            <summary>
            The native handle.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Body.#ctor">
            <summary>
            Create a Dynamic Body with no mass and no moment.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Body.#ctor(ChipmunkBinding.BodyType)">
            <summary>
             Create a <see cref="T:ChipmunkBinding.Body"/> of the given <see cref="T:ChipmunkBinding.BodyType"/>.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Body.#ctor(System.Double,System.Double)">
            <summary>
            Creates a body with the given mass and moment.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Body.#ctor(System.Double,System.Double,ChipmunkBinding.BodyType)">
            <summary>
            Creates a body with the given mass and moment, of the give <see cref="T:ChipmunkBinding.BodyType"/>.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Body.FromHandle(System.IntPtr)">
            <summary>
            Get a <see cref="T:ChipmunkBinding.Body"/> object from a native cpBody handle.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Body.FromHandleSafe(System.IntPtr)">
            <summary>
            Get the managed <see cref="T:ChipmunkBinding.Body"/> object from the native handle.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Body.Free">
            <summary>
            Destroy and free the body.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Body.Dispose(System.Boolean)">
            <summary>
            Dispose the body.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Body.Dispose">
            <summary>
            Dispose the body.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Body.Angle">
            <summary>
            Rotation of the body in radians. When changing the rotation, you may also want to call
            <see cref="M:ChipmunkBinding.Space.ReindexShapesForBody(ChipmunkBinding.Body)"/> to update the collision detection information
            for the attached shapes if you plan to make any queries against the space. A body
            rotates around its center of gravity, not its position.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Body.Type">
            <summary>
            The way the body behaves in physics simulations.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Body.Mass">
            <summary>
            Mass of the rigid body. Mass does not have to be expressed in any particular units, but
            relative masses should be consistent. 
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Body.Moment">
            <summary>
            Moment of inertia of the body. The mass tells you how hard it is to push an object,
            the MoI tells you how hard it is to spin the object. Don't try to guess the MoI, use the
            MomentFor*() functions to estimate it, or the physics may behave strangely. 
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Body.Space">
            <summary>
            Get the space this body is associated with, or null if it is not currently associated.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Body.Position">
            <summary>
            Position of the body. When changing the position, you may also want to call
            <see cref="M:ChipmunkBinding.Space.ReindexShapesForBody(ChipmunkBinding.Body)"/> to update the collision detection information
            for the attached shapes if you plan to make any queries against the space.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Body.CenterOfGravity">
            <summary>
            Location of the center of gravity in body-local coordinates. The default value is
            (0, 0), meaning the center of gravity is the same as the position of the body.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Body.Velocity">
            <summary>
            Linear velocity of the center of gravity of the body.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Body.Force">
            <summary>
            Force applied to the center of gravity of the body. This value is reset for every time
            step.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Body.AngularVelocity">
            <summary>
            The angular velocity of the body in radians per second.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Body.Torque">
            <summary>
            The torque applied to the body. This value is reset for every time step.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Body.Rotation">
            <summary>
            The rotation vector for the body. Can be used with cpvrotate() or cpvunrotate() to perform fast rotations.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Body.Arbiters">
            <summary>
            Get the list of body Arbiters
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Body.Constraints">
            <summary>
            All constraints attached to the body
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Body.Shapes">
            <summary>
            All shapes attached to the body
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Body.IsSleeping">
            <summary>
            Returns true if body is sleeping.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Body.Activate">
            <summary>
                Reset the idle timer on a body.
                If it was sleeping, wake it and any other bodies it was touching.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Body.ActivateStatic(ChipmunkBinding.Shape)">
            <summary>
            Similar in function to Activate(). Activates all bodies touching body. If filter is not NULL, then only bodies touching through filter will be awoken.
            </summary>
            <param name="filter"></param>
        </member>
        <member name="M:ChipmunkBinding.Body.ApplyForceAtLocalPoint(ChipmunkBinding.Vect,ChipmunkBinding.Vect)">
            <summary>
            Add the local force force to body as if applied from the body local point.
            </summary>
            <param name="force"></param>
            <param name="point"></param>
        </member>
        <member name="M:ChipmunkBinding.Body.ApplyForceAtWorldPoint(ChipmunkBinding.Vect,ChipmunkBinding.Vect)">
            <summary>
                Add the force force to body as if applied from the world point.
                People are sometimes confused by the difference between a force and an impulse.
                An impulse is a very large force applied over a very short period of time.
                Some examples are a ball hitting a wall or cannon firing.
                Chipmunk treats impulses as if they occur instantaneously by adding directly to the velocity of an object.
                Both impulses and forces are affected the mass of an object.
                Doubling the mass of the object will halve the effect.
            </summary>
            <param name="force"></param>
            <param name="point"></param>
        </member>
        <member name="M:ChipmunkBinding.Body.ApplyImpulseAtWorldPoint(ChipmunkBinding.Vect,ChipmunkBinding.Vect)">
            <summary>
            Apply an impulse to a body. Both the impulse and point are expressed in world coordinates.
            </summary>
            <param name="impulse"></param>
            <param name="point"></param>
        </member>
        <member name="M:ChipmunkBinding.Body.ApplyImpulseAtLocalPoint(ChipmunkBinding.Vect,ChipmunkBinding.Vect)">
            <summary>
            Apply an impulse to a body. Both the impulse and point are expressed in body local coordinates.
            </summary>
            <param name="impulse"></param>
            <param name="point"></param>
        </member>
        <member name="M:ChipmunkBinding.Body.Sleep">
            <summary>
            Forces a body to fall asleep immediately even if it’s in midair. Cannot be called from a callback.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Body.SleepWithGroup(ChipmunkBinding.Body)">
            <summary>
            When objects in Chipmunk sleep, they sleep as a group of all objects that are touching or jointed together.
            When an object is woken up, all of the objects in its group are woken up.
            SleepWithGroup() allows you group sleeping objects together. It acts identically to Sleep() if you pass null as
            group by starting a new group.
            If you pass a sleeping body for group, body will be awoken when group is awoken.
            You can use this to initialize levels and start stacks of objects in a pre-sleeping state.
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:ChipmunkBinding.Body.VelocityUpdateFunction">
            <summary>
            Set the callback used to update a body's velocity.
            Parameters: body, gravity, damping and deltaTime
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Body.PositionUpdateFunction">
            <summary>
            Set the callback used to update a body's position.
            Parameters: body, deltaTime
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Body.UpdateVelocity(ChipmunkBinding.Vect,System.Double,System.Double)">
            <summary>
            Default velocity integration function..
            </summary>
            <param name="gravity"></param>
            <param name="damping"></param>
            <param name="dt"></param>
        </member>
        <member name="M:ChipmunkBinding.Body.UpdatePosition(System.Double)">
            <summary>
            Default position integration function.
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:ChipmunkBinding.Body.LocalToWorld(ChipmunkBinding.Vect)">
            <summary>
            Convert body relative/local coordinates to absolute/world coordinates.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:ChipmunkBinding.Body.WorldToLocal(ChipmunkBinding.Vect)">
            <summary>
            Convert body absolute/world coordinates to  relative/local coordinates.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:ChipmunkBinding.Body.GetVelocityAtWorldPoint(ChipmunkBinding.Vect)">
            <summary>
            Get the velocity on a body (in world units) at a point on the body in world coordinates.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:ChipmunkBinding.Body.GetVelocityAtLocalPoint(ChipmunkBinding.Vect)">
            <summary>
            Get the velocity on a body (in world units) at a point on the body in local coordinates.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="P:ChipmunkBinding.Body.KineticEnergy">
            <summary>
            Get the kinetic energy of a body.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Body.MomentForBox(System.Double,System.Double,System.Double)">
            <summary>
            Calculate the moment of inertia for a solid box centered on the body.
            </summary>
            <param name="mass"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="T:ChipmunkBinding.BodyType">
            <summary>
            Chipmunk supports three different types of bodies with unique behavioral and performance
            characteristics.
            </summary>
        </member>
        <member name="F:ChipmunkBinding.BodyType.Dynamic">
            <summary>
            Dynamic bodies are the default body type. They react to collisions, are affected by
            forces and gravity, and have a finite amount of mass. These are the type of bodies that
            you want the physics engine to simulate for you. Dynamic bodies interact with all types
            of bodies and can generate collision callbacks.
            </summary>
        </member>
        <member name="F:ChipmunkBinding.BodyType.Kinematic">
            <summary>
            Kinematic bodies are bodies that are controlled from your code instead of from the
            physics engine. They aren't affected by gravity and they have an infinite amount of
            mass, so they don’t react to collisions or forces with other bodies. Kinematic bodies
            are controlled by setting their velocity, which will cause them to move. Good examples
            of kinematic bodies might include things like moving platforms. Objects that are
            touching or jointed to a kinematic body are never allowed to fall asleep.
            </summary>
        </member>
        <member name="F:ChipmunkBinding.BodyType.Static">
            <summary>
            Static bodies are bodies that never (or rarely) move. Using static bodies for things
            like terrain offers a big performance boost over other body types -- Chipmunk doesn't
            need to check for collisions between static objects and it never needs to update their
            collision information. Additionally, because static bodies don’t move, Chipmunk knows
            it’s safe to let objects that are touching or jointed to them fall asleep. Generally,
            all of your level geometry will be attached to a static body, except for things like
            moving platforms or doors. Every space provides a built-in static body for your
            convenience. Static bodies can be moved, but there is a performance penalty as the
            collision information is recalculated. There is no penalty for having multiple static
            bodies, and it can be useful in simplifying your code to allow different parts of your
            static geometry to be initialized or moved separately.
            </summary>
        </member>
        <member name="T:ChipmunkBinding.DampedRotarySpring">
            <summary>
            DampedRotarySpring works like <see cref="T:ChipmunkBinding.DampedSpring"/>, but in an angular fashion.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.DampedRotarySpring.IsDampedRotarySpring(ChipmunkBinding.Constraint)">
            <summary>
            Check if a constraint is a <see cref="T:ChipmunkBinding.DampedRotarySpring"/>.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.DampedRotarySpring.#ctor(ChipmunkBinding.Body,ChipmunkBinding.Body,System.Double,System.Double,System.Double)">
            <summary>
            Create a damped rotary spring.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.DampedRotarySpring.RestAngle">
            <summary>
            The rest angle of the spring.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.DampedRotarySpring.Stiffness">
            <summary>
            The stiffness of the spring in force/distance.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.DampedRotarySpring.Damping">
            <summary>
            The damping of the spring.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.DampedRotarySpring.TorqueFunction">
            <summary>
            Damped rotary spring torque custom function callback.
            </summary>
        </member>
        <member name="T:ChipmunkBinding.DampedSpring">
            <summary>
            <see cref="T:ChipmunkBinding.DampedSpring"/> is a damped spring.
            The spring allows you to define the rest length, stiffness and damping.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.DampedSpring.IsDampedSpring(ChipmunkBinding.Constraint)">
            <summary>
            Check if a constraint is a <see cref="T:ChipmunkBinding.DampedSpring"/>.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.DampedSpring.#ctor(ChipmunkBinding.Body,ChipmunkBinding.Body,ChipmunkBinding.Vect,ChipmunkBinding.Vect,System.Double,System.Double,System.Double)">
            <summary>
            Defined much like a slide joint.
            </summary>
            <param name="bodyA">The first connected body.</param>
            <param name="bodyB">The second connected body.</param>
            <param name="anchorA">Anchor point a, relative to body a.</param>
            <param name="anchorB"> Anchor point b, relative to body b.</param>
            <param name="restLength">The distance the spring wants to be.</param>
            <param name="stiffness">The spring constant (Young’s modulus).</param>
            <param name="damping">How soft to make the damping of the spring.</param>
        </member>
        <member name="P:ChipmunkBinding.DampedSpring.AnchorA">
            <summary>
            The location of the first anchor relative to the first body.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.DampedSpring.AnchorB">
            <summary>
            The location of the second anchor relative to the second body.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.DampedSpring.RestLength">
            <summary>
            The rest length of the spring.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.DampedSpring.Stiffness">
            <summary>
            The stiffness of the spring in force/distance.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.DampedSpring.Damping">
            <summary>
            The damping of the spring.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.DampedSpring.ForceFunction">
            <summary>
            Damped spring force custom function callback.
            </summary>
        </member>
        <member name="T:ChipmunkBinding.GrooveJoint">
            <summary>
            <see cref="T:ChipmunkBinding.GrooveJoint"/> is similar to a <see cref="T:ChipmunkBinding.PivotJoint"/>, but with a linear slide.
            One of the anchor points is a line segment that the pivot can slide on instead of being fixed.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.GrooveJoint.IsGrooveJoint(ChipmunkBinding.Constraint)">
            <summary>
            Check if a constraint is a <see cref="T:ChipmunkBinding.GrooveJoint"/>.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.GrooveJoint.#ctor(ChipmunkBinding.Body,ChipmunkBinding.Body,ChipmunkBinding.Vect,ChipmunkBinding.Vect,ChipmunkBinding.Vect)">
            <summary>
            Create an anchor where <paramref name="bodyB"/> can rotate similar to a
            <see cref="T:ChipmunkBinding.PivotJoint"/>, except it's anchored at <paramref name="anchorB"/>, which is a
            point that can slide between <paramref name="grooveA"/> and <paramref name="grooveB"/>.
            </summary>
            <param name="bodyA">The first connected body.</param>
            <param name="bodyB">The second connected body.</param>
            <param name="grooveA">
            The start of the groove on <paramref name="bodyA"/>. Coordinates are local to the body.
            </param>
            <param name="grooveB">
            The end of the groove on <paramref name="bodyA"/>. Coordinates are local to the body.
            </param>
            <param name="anchorB">
            The location of the pivot on <paramref name="bodyB"/>. Coordinates are local to the
            body.
            </param>
        </member>
        <member name="P:ChipmunkBinding.GrooveJoint.GrooveA">
            <summary>
            The first endpoint of the groove relative to the first body.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.GrooveJoint.GrooveB">
            <summary>
            The second endpoint of the groove relative to the first body.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.GrooveJoint.AnchorB">
            <summary>
             The location of the second anchor relative to the second body.
            </summary>
        </member>
        <member name="T:ChipmunkBinding.PinJoint">
            <summary>
            <see cref="T:ChipmunkBinding.PinJoint"/> links shapes with a solid bar or pin. Keeps the anchor points at a
            set distance from one another.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.PinJoint.IsPinJoint(ChipmunkBinding.Constraint)">
            <summary>
            Check if a constraint is a <see cref="T:ChipmunkBinding.PinJoint"/>.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.PinJoint.#ctor(ChipmunkBinding.Body,ChipmunkBinding.Body,ChipmunkBinding.Vect,ChipmunkBinding.Vect)">
            <summary>
            The distance between the two anchor points is measured when the joint is created. If you
            want to set a specific distance, use the setter function to override it.
            </summary>
            <param name="bodyA">One of the two bodies to connect.</param>
            <param name="bodyB">One of the two bodies to connect.</param>
            <param name="anchorA">The anchor point for <paramref name="bodyA"/>.</param>
            <param name="anchorB">The anchor point for <paramref name="bodyB"/>.</param>
        </member>
        <member name="P:ChipmunkBinding.PinJoint.AnchorA">
            <summary>
            The location of the first anchor relative to the first body.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.PinJoint.AnchorB">
            <summary>
            The location of the second anchor relative to the second body.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.PinJoint.Distance">
            <summary>
            The distance the joint will maintain between the two anchors.
            </summary>
        </member>
        <member name="T:ChipmunkBinding.PivotJoint">
            <summary>
            <see cref="T:ChipmunkBinding.PivotJoint"/> acts like a swivel, allowing two objects to pivot about a single
            point.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.PivotJoint.IsPivotJoint(ChipmunkBinding.Constraint)">
            <summary>
            Check if a constraint is a <see cref="T:ChipmunkBinding.PinJoint"/>.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.PivotJoint.#ctor(ChipmunkBinding.Body,ChipmunkBinding.Body,ChipmunkBinding.Vect,ChipmunkBinding.Vect)">
            <summary>
            Initialize a pivot joint with two anchors. Since the anchors are provided in world
            coordinates, the bodies must already be correctly positioned. The joint is fixed as soon
            as the containing space is simulated.
            </summary>
            <param name="bodyA">One of the two bodies to connect.</param>
            <param name="bodyB">One of the two bodies to connect.</param>
            <param name="anchorA">
            The location of one of the anchors, specified in world coordinates.
            </param>
            <param name="anchorB">
            The location of one of the anchors, specified in world coordinates.
            </param>
        </member>
        <member name="M:ChipmunkBinding.PivotJoint.#ctor(ChipmunkBinding.Body,ChipmunkBinding.Body,ChipmunkBinding.Vect)">
            <summary>
            Initialize a pivot joint with one anchor. Since the pivot is provided in world
            coordinates, the bodies must already be correctly positioned.
            </summary>
            <param name="bodyA">One of the two bodies to connect.</param>
            <param name="bodyB">One of the two bodies to connect.</param>
            <param name="anchor">The location of the pivot, specified in world coordinates.</param>
        </member>
        <member name="P:ChipmunkBinding.PivotJoint.AnchorA">
            <summary>
            The location of the first anchor relative to the first body.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.PivotJoint.AnchorB">
            <summary>
            The location of the second anchor relative to the second body.
            </summary>
        </member>
        <member name="T:ChipmunkBinding.SlideJoint">
            <summary>
            <see cref="T:ChipmunkBinding.SlideJoint"/> is like a <see cref="T:ChipmunkBinding.PinJoint"/>, but with a minimum and maximum
            distance. A chain could be modeled using this joint. It keeps the anchor points from getting
            too far apart, but will allow them to get closer together.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.SlideJoint.IsSlideJoint(ChipmunkBinding.Constraint)">
            <summary>
            Check if a constraint is a <see cref="T:ChipmunkBinding.SlideJoint"/>.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.SlideJoint.#ctor(ChipmunkBinding.Body,ChipmunkBinding.Body,ChipmunkBinding.Vect,ChipmunkBinding.Vect,System.Double,System.Double)">
            <summary>
            Create a slide constraint between two bodies.
            </summary>
            <param name="bodyA">One of the two bodies to connect.</param>
            <param name="bodyB">One of the two bodies to connect.</param>
            <param name="anchorA">The anchor point for <paramref name="bodyA"/>.</param>
            <param name="anchorB">The anchor point for <paramref name="bodyB"/>.</param>
            <param name="min">The minimum distance the anchor points can get to each other.</param>
            <param name="max">The maximum distance the anchor points can be apart.</param>
        </member>
        <member name="P:ChipmunkBinding.SlideJoint.AnchorA">
            <summary>
            The location of the first anchor relative to the first body.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.SlideJoint.AnchorB">
            <summary>
            The location of the second anchor relative to the second body.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.SlideJoint.Minimum">
            <summary>
            The minimum distance the joint will maintain between the two anchors
            </summary>
        </member>
        <member name="P:ChipmunkBinding.SlideJoint.Maximum">
            <summary>
            The maximum distance the joint will maintain between the two anchors.
            </summary>
        </member>
        <member name="T:ChipmunkBinding.Box">
            <summary>
            A retangular shape shape 
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Box.#ctor(ChipmunkBinding.Body,System.Double,System.Double,System.Double)">
            <summary>
            Create and initialize a box polygon shape.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Box.#ctor(ChipmunkBinding.Body,ChipmunkBinding.BoundingBox,System.Double)">
            <summary>
            Create and initialize an offset box polygon shape.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Box.MomentForBox(System.Double,System.Double,System.Double)">
            <summary>
            Calculate the moment of inertia for a solid box.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Box.MomentForBox(System.Double,ChipmunkBinding.BoundingBox)">
            <summary>
            Calculate the moment of inertia for a solid box.
            </summary>
        </member>
        <member name="T:ChipmunkBinding.Circle">
            <summary>
            A circle shape defined by a radius
            This is the fastest and simplest collision shape
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Circle.#ctor(ChipmunkBinding.Body,System.Double)">
            <summary>
            Create and initialize a circle polygon shape.
            </summary>
            <param name="body">The body to attach the circle to.</param>
            <param name="radius">The radius of the circle.</param>
        </member>
        <member name="M:ChipmunkBinding.Circle.#ctor(ChipmunkBinding.Body,System.Double,ChipmunkBinding.Vect)">
            <summary>
            Create and initialize an offset circle polygon shape.
            </summary>
            <param name="body">The body to attach the circle to.</param>
            <param name="radius">The radius of the circle.</param>
            <param name="offset">
            The offset from the body's center of gravity in coordinates local to the body.
            </param>
        </member>
        <member name="P:ChipmunkBinding.Circle.Offset">
            <summary>
            Get the offset of the circle.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Circle.Radius">
            <summary>
             Get the radius of the circle.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Circle.Area">
            <summary>
            Get the calculated area of the circle.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Circle.MomentForMass(System.Double)">
            <summary>
            Calculate the moment of the circle for the given mass.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Circle.MomentForCircle(System.Double,System.Double,System.Double,ChipmunkBinding.Vect)">
            <summary>
            Calculate the moment of inertia for the circle.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Circle.MomentForCircle(System.Double,System.Double,ChipmunkBinding.Vect)">
            <summary>
            Calculate the moment of inertia for the circle.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Circle.AreaForCircle(System.Double,System.Double)">
            <summary>
            Calculate the area of a circle or donut.
            </summary>
            <param name="innerRadius">
            The radius of the 'donut hole', which defines the area missing.
            </param>
            <param name="radius">
            The outer radius of the donut. This should be greater than the
            <paramref name="innerRadius"/>.
            </param>
        </member>
        <member name="T:ChipmunkBinding.ContactPoint">
            <summary>
             Contains information about a contact point. <see cref="P:ChipmunkBinding.ContactPoint.PointA"/> and <see cref="P:ChipmunkBinding.ContactPoint.PointB"/>
             are the contact positions on the surface of each shape. <see cref="P:ChipmunkBinding.ContactPoint.Distance"/> is the
             penetration distance of the two, which is a negative value. This value is calculated as
             dot(point2 - point1), normal) and is ignored when you set the
             <see cref="P:ChipmunkBinding.Arbiter.ContactPointSet"/>.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.ContactPoint.PointA">
            <summary>
            Point A in the contact point.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.ContactPoint.PointB">
            <summary>
             Point B in the contact point.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.ContactPoint.Distance">
            <summary>
            The penetration distance of the two shapes (as a negative value). This value is
            calculated as  dot(point2 - point1), normal) and is ignored when you set the
            <see cref="P:ChipmunkBinding.Arbiter.ContactPointSet"/>.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.ContactPoint.Equals(ChipmunkBinding.ContactPoint)">
            <summary>
            Returns true if neither <see cref="T:ChipmunkBinding.ContactPoint"/> is null and the points are within
            <see cref="F:System.Single.Epsilon"/> distance of each other.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.ContactPoint.Equals(System.Object)">
            <summary>
            Check if this <see cref="T:ChipmunkBinding.ContactPoint"/> is equal to an object.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.ContactPoint.GetHashCode">
            <summary>
            Get the <see cref="T:ChipmunkBinding.ContactPoint"/> hash set.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.ContactPoint.ToString">
            <summary>
            Returns a string in the format of "a: {pointA}, b: {pointB}, distance: {distance}".
            </summary>
        </member>
        <member name="M:ChipmunkBinding.ContactPoint.op_Equality(ChipmunkBinding.ContactPoint,ChipmunkBinding.ContactPoint)">
            <summary>
            Returns true if both <see cref="T:ChipmunkBinding.ContactPoint"/>s are the same object or the dimensions
            are within <see cref="F:System.Single.Epsilon"/> distance of each other.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.ContactPoint.op_Inequality(ChipmunkBinding.ContactPoint,ChipmunkBinding.ContactPoint)">
            <summary>
            Returns false if both <see cref="T:ChipmunkBinding.ContactPoint"/>s are the same object or the dimensions
            are within <see cref="F:System.Single.Epsilon"/> distance of each other.
            </summary>
        </member>
        <member name="T:ChipmunkBinding.ContactPointSet">
            <summary>
            Contact point sets make getting contact information simpler. There can be at most 2 contact
            points.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.ContactPointSet.Count">
            <summary>
            Get the number of contact points in the contact set (maximum of two).
            </summary>
        </member>
        <member name="P:ChipmunkBinding.ContactPointSet.Normal">
            <summary>
            Get the normal of the collision.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.ContactPointSet.Points">
            <summary>
            List of points in the contact point set
            </summary>
        </member>
        <member name="M:ChipmunkBinding.ContactPointSet.Equals(ChipmunkBinding.ContactPointSet)">
            <summary>
            Return true if the contact point set is sequence-equal to another.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.ContactPointSet.GetHashCode">
            <summary>
            Get the hash code.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.ContactPointSet.Equals(System.Object)">
            <summary>
            Return true if the <see cref="T:ChipmunkBinding.ContactPointSet"/> is sequence-equal to another.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.ContactPointSet.op_Equality(ChipmunkBinding.ContactPointSet,ChipmunkBinding.ContactPointSet)">
            <summary>
            Return true if the contact point sets are sequence-equal.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.ContactPointSet.op_Inequality(ChipmunkBinding.ContactPointSet,ChipmunkBinding.ContactPointSet)">
            <summary>
            Return true if the contact point sets are sequence-inequal.
            </summary>
        </member>
        <member name="T:ChipmunkBinding.DebugDrawColors">
            <summary>
            Default DebugColors for ShapeOutline, Constraint and CollisionPoint
            </summary>
        </member>
        <member name="P:ChipmunkBinding.DebugDrawColors.ShapeOutline">
            <summary>
            Shape outline color.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.DebugDrawColors.Constraint">
            <summary>
            Constraint color.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.DebugDrawColors.CollisionPoint">
            <summary>
            Collision point color.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.DebugDrawColors.Default">
            <summary>
            The Default DebugDrawColors.
            </summary>
        </member>
        <member name="T:ChipmunkBinding.DebugDrawFlags">
            <summary>
            Flags to enable or disable DebugDrawing.
            </summary>
        </member>
        <member name="F:ChipmunkBinding.DebugDrawFlags.None">
            <summary>
            Draw nothing.
            </summary>
        </member>
        <member name="F:ChipmunkBinding.DebugDrawFlags.Shapes">
            <summary>
            Draw Shapes.
            </summary>
        </member>
        <member name="F:ChipmunkBinding.DebugDrawFlags.Constraints">
            <summary>
            Draw Constraints.
            </summary>
        </member>
        <member name="F:ChipmunkBinding.DebugDrawFlags.CollisionPoints">
            <summary>
             Draw Collision Points.
            </summary>
        </member>
        <member name="F:ChipmunkBinding.DebugDrawFlags.All">
            <summary>
            Draw All.
            </summary>
        </member>
        <member name="T:ChipmunkBinding.IDebugDraw">
            <summary>
            Interface to draw debug primitives (circle, point, segment).
            </summary>
        </member>
        <member name="M:ChipmunkBinding.IDebugDraw.DrawCircle(ChipmunkBinding.Vect,System.Double,System.Double,ChipmunkBinding.DebugColor,ChipmunkBinding.DebugColor)">
            <summary>
            Draw stroked circle.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.IDebugDraw.DrawSegment(ChipmunkBinding.Vect,ChipmunkBinding.Vect,ChipmunkBinding.DebugColor)">
            <summary>
            Draws a line segment.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.IDebugDraw.DrawFatSegment(ChipmunkBinding.Vect,ChipmunkBinding.Vect,System.Double,ChipmunkBinding.DebugColor,ChipmunkBinding.DebugColor)">
            <summary>
            Draws a thick line segment.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.IDebugDraw.DrawPolygon(ChipmunkBinding.Vect[],System.Double,ChipmunkBinding.DebugColor,ChipmunkBinding.DebugColor)">
            <summary>
            Draws a convex polygon.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.IDebugDraw.DrawDot(System.Double,ChipmunkBinding.Vect,ChipmunkBinding.DebugColor)">
            <summary>
            Draws a dot.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.IDebugDraw.ColorForShape(ChipmunkBinding.Shape)">
            <summary>
            Returns a color for a given shape. This gives you an opportunity to color shapes based
            on how they are used in your engine.
            </summary>
        </member>
        <member name="T:ChipmunkBinding.DelegateExtensions">
            <summary>
            Create a ToFunctionPointer extension method for each delegate type. Unfortunately C# 7.0
            can't do something like that (you will need C# 7.3), thus we create one extension method for
            each delegate public static IntPtr ToFunctionPointer T (this T d) where T : Delegate
            </summary>
        </member>
        <member name="T:ChipmunkBinding.BodyArbiterIteratorFunction">
            <summary>
            Delegate method to iterate over arbiters.
            </summary>
        </member>
        <member name="T:ChipmunkBinding.BodyPositionFunction">
            <summary>
            Rigid body position update function type.
            </summary>
        </member>
        <member name="T:ChipmunkBinding.BodyConstraintIteratorFunction">
            <summary>
            Delegate method to iterate over constraints.
            </summary>
        </member>
        <member name="T:ChipmunkBinding.BodyShapeIteratorFunction">
            <summary>
            Delegate method to iterate over shapes.
            </summary>
        </member>
        <member name="T:ChipmunkBinding.CollisionBeginFunction">
            <summary>
            Collision begin event function callback type. Returning false from a begin callback causes
            the collision to be ignored until the the separate callback is called when the objects stop
            colliding.
            </summary>
        </member>
        <member name="T:ChipmunkBinding.CollisionPreSolveFunction">
            <summary>
            Collision pre-solve event function callback type. Returning false from a pre-step callback
            causes the collision to be ignored until the next step.
            </summary>
        </member>
        <member name="T:ChipmunkBinding.CollisionPostSolveFunction">
            <summary>
            Collision Post-Solve .
            </summary>
        </member>
        <member name="T:ChipmunkBinding.CollisionSeparateFunction">
            <summary>
            Collision separate event function callback type.
            </summary>
        </member>
        <member name="T:ChipmunkBinding.PostStepFunction">
            <summary>
            Post Step callback function type.
            </summary>
        </member>
        <member name="T:ChipmunkBinding.SpacePointQueryFunction">
            <summary>
            Nearest point query callback function type.
            </summary>
        </member>
        <member name="T:ChipmunkBinding.SpaceSegmentQueryFunction">
            <summary>
            Segment query callback function type.
            </summary>
        </member>
        <member name="T:ChipmunkBinding.SpaceBBQueryFunction">
            <summary>
            Rectangle Query callback function type.
            </summary>
        </member>
        <member name="T:ChipmunkBinding.SpaceObjectIteratorFunction">
            <summary>
            Space/object iterator callback function type.
            </summary>
        </member>
        <member name="T:ChipmunkBinding.SpaceDebugDrawCircleImpl">
            <summary>
            Callback type for a function that draws a filled, stroked circle.
            </summary>
        </member>
        <member name="T:ChipmunkBinding.SpaceDebugDrawSegmentImpl">
            <summary>
            Callback type for a function that draws a line segment.
            </summary>
        </member>
        <member name="T:ChipmunkBinding.SpaceDebugDrawFatSegmentImpl">
            <summary>
            Callback type for a function that draws a thick line segment.
            </summary>
        </member>
        <member name="T:ChipmunkBinding.SpaceDebugDrawPolygonImpl">
            <summary>
            Callback type for a function that draws a convex polygon.
            </summary>
        </member>
        <member name="T:ChipmunkBinding.SpaceDebugDrawDotImpl">
            <summary>
            Callback type for a function that draws a dot.
            </summary>
        </member>
        <member name="T:ChipmunkBinding.SpaceDebugDrawColorForShapeImpl">
            <summary>
            Callback type for a function that returns a color for a given shape. This gives you an
            opportunity to color shapes based on how they are used in your engine.
            </summary>
        </member>
        <member name="T:ChipmunkBinding.ConstraintSolveFunction">
            <summary>
            Callback function type that gets called after/before solving a joint.
            </summary>
        </member>
        <member name="T:ChipmunkBinding.DampedSpringForceFunction">
            <summary>
            Function type used for damped spring force callbacks.
            </summary>
        </member>
        <member name="T:ChipmunkBinding.DampedRotarySpringTorqueFunction">
            <summary>
            Function type used for damped rotary spring force callbacks
            </summary>
        </member>
        <member name="T:ChipmunkBinding.SpaceShapeQueryFunction">
            <summary>
            Shape query callback function type.
            </summary>
        </member>
        <member name="T:ChipmunkBinding.MarchSegmentFunction">
            <summary>
            Function type used as a callback from the marching squares algorithm to output a line
            segment. It passes you the two endpoints and your context pointer.
            </summary>
        </member>
        <member name="T:ChipmunkBinding.MarchSampleFunction">
            <summary>
            Function type used as a callback from the marching squares algorithm to sample an image function.
            It passes you the point to sample and your context pointer, and you return the density.
            </summary>
        </member>
        <member name="T:ChipmunkBinding.PointQueryInfo">
            <summary>
            <see cref="T:ChipmunkBinding.PointQueryInfo"/> holds the result of a point query made on a <see cref="P:ChipmunkBinding.PointQueryInfo.Shape"/>
            or <see cref="T:ChipmunkBinding.Space"/>.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.PointQueryInfo.Shape">
            <summary>
            The nearest shape, None if no shape was within range.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.PointQueryInfo.Point">
            <summary>
            The closest point on the shape’s surface (in world space coordinates).
            </summary>
        </member>
        <member name="P:ChipmunkBinding.PointQueryInfo.Distance">
            <summary>
            The distance to the point. The distance is negative if the point is inside the shape.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.PointQueryInfo.Gradient">
            <summary>
            The gradient of the signed distance function.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.PointQueryInfo.#ctor(ChipmunkBinding.Shape,ChipmunkBinding.Vect,System.Double,ChipmunkBinding.Vect)">
            <summary>
            Create a <see cref="T:ChipmunkBinding.PointQueryInfo"/>.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.PointQueryInfo.Equals(System.Object)">
            <summary>
            Return true if this <see cref="T:ChipmunkBinding.PointQueryInfo"/> object is reference-equal to the given
            object.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.PointQueryInfo.GetHashCode">
            <summary>
            Get the hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ChipmunkBinding.PointQueryInfo.op_Equality(ChipmunkBinding.PointQueryInfo,ChipmunkBinding.PointQueryInfo)">
            <summary>
            Return true if this <see cref="T:ChipmunkBinding.PointQueryInfo"/> object is reference-equal to the given
            object.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.PointQueryInfo.op_Inequality(ChipmunkBinding.PointQueryInfo,ChipmunkBinding.PointQueryInfo)">
            <summary>
            Return true if this <see cref="T:ChipmunkBinding.PointQueryInfo"/> object is not reference-equal to the
            given object.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.PointQueryInfo.Equals(ChipmunkBinding.PointQueryInfo)">
            <summary>
            Return true if this <see cref="T:ChipmunkBinding.PointQueryInfo"/> object's distance is within
            <see cref="F:System.Single.Epsilon"/> of the other and all other fields are equivalent.
            </summary>
        </member>
        <member name="T:ChipmunkBinding.Polygon">
            <summary>
            A polygon shape composed of connected vertices.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Polygon.#ctor(ChipmunkBinding.Body,System.Collections.Generic.IReadOnlyList{ChipmunkBinding.Vect},ChipmunkBinding.Transform,System.Double)">
            <summary>
            A convex polygon shape. It's the slowest, but most flexible collision shape.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Polygon.#ctor(ChipmunkBinding.Body,ChipmunkBinding.Vect[],System.Double)">
            <summary>
            Allocate and initialize a polygon shape with rounded corners.
            The vertexes must be convex with a counter-clockwise winding.
            </summary>
            <param name="body"></param>
            <param name="verts"></param>
            <param name="radius"></param>
        </member>
        <member name="P:ChipmunkBinding.Polygon.Count">
            <summary>
            Get the number of vertices in a polygon shape.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Polygon.GetVertex(System.Int32)">
            <summary>
            Get the <paramref name="i"/>th vertex of a polygon shape.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Polygon.Vertices">
            <summary>
            Get the vertices of the polygon.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Polygon.Radius">
            <summary>
            Get the radius of the polygon.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Polygon.Area">
            <summary>
             Get and calculate the signed area of this polygon. Vertices specified such that they connect in
             a clockwise fashion (called winding) give a positive area measurement. This is probably
             backwards to what you might expect.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Polygon.Centroid">
            <summary>
            Get and calculate the centroid of the polygon.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Polygon.MomentForPolygon(System.Double,System.Collections.Generic.IReadOnlyList{ChipmunkBinding.Vect},ChipmunkBinding.Vect,System.Double)">
            <summary>
            Calculate the moment of inertia for a solid polygon shape assuming its center of gravity
            is at its centroid. The offset is added to each vertex.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Polygon.AreaForPoly(System.Collections.Generic.IReadOnlyList{ChipmunkBinding.Vect},System.Double)">
            <summary>
            Calculate the signed area of this polygon. Vertices specified such that they connect in
             a clockwise fashion (called winding) give a positive area measurement. This is probably
             backwards to what you might expect.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Polygon.CentroidForPoly(System.Collections.Generic.IReadOnlyList{ChipmunkBinding.Vect})">
            <summary>
            Calculate the natural centroid of a polygon.
            </summary>
        </member>
        <member name="T:ChipmunkBinding.Segment">
            <summary>
            A line segment shape between two points, which is mainly useful when it behaves statically,
            though it can be beveled to give it thickness.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Segment.#ctor(ChipmunkBinding.Body,ChipmunkBinding.Vect,ChipmunkBinding.Vect,System.Double)">
            <summary>
            Create a line segment.
            </summary>
            <param name="body">The body to attach the segment to.</param>
            <param name="a">The first endpoint of the segment.</param>
            <param name="b">The second endpoint of the segment.</param>
            <param name="radius">The thickness of the segment.</param>
        </member>
        <member name="M:ChipmunkBinding.Segment.SetNeighbors(ChipmunkBinding.Vect,ChipmunkBinding.Vect)">
            <summary>
            Let Chipmunk know about the geometry of adjacent segments to avoid colliding with endcaps.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Segment.A">
            <summary>
            Get the first endpoint of the segment shape.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Segment.B">
            <summary>
            Get the second endpoint of the segment shape.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Segment.Normal">
            <summary>
            Get the normal of the segment shape.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Segment.Radius">
            <summary>
            Get the segment radius.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Segment.Area">
            <summary>
            Calculate the area of the segment, assuming a thickness has been provided. The area is
            calculated assuming the endpoints would be rounded, like a capsule.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Segment.MomentForMass(System.Double)">
            <summary>
            Calculate the moment of inertia of the segment.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Segment.MomentForSegment(System.Double,ChipmunkBinding.Vect,ChipmunkBinding.Vect,System.Double)">
            <summary>
            Calculate the moment of inertia for the line segment.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Segment.AreaForSegment(ChipmunkBinding.Vect,ChipmunkBinding.Vect,System.Double)">
            <summary>
            Calculate the area of a segment, assuming a thickness has been provided. The area is
            calculated assuming the endpoints would be rounded, like a capsule.
            </summary>
        </member>
        <member name="T:ChipmunkBinding.SegmentQueryInfo">
            <summary>
            Segment queries return where a shape was hit and its surface normal at the point of contact.
            Use <see cref="P:ChipmunkBinding.SegmentQueryInfo.Shape"/> == null to test if a shape was hit. Segment queries
            are like ray casting, but because not all spatial indexes allow processing infinitely long
            ray queries, it's limited to segments. In practice, this is still very fast and you don’t
            need to worry too much about the performance as long as you aren’t using extremely long
            segments for your queries.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.SegmentQueryInfo.Shape">
            <summary>
            Shape that was hit, or None if no collision occured.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.SegmentQueryInfo.Point">
            <summary>
            The point of impact.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.SegmentQueryInfo.Normal">
            <summary>
            The normal of the surface that was hit.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.SegmentQueryInfo.Alpha">
            <summary>
            The normalized distance along the query segment in the range [0, 1]
            </summary>
        </member>
        <member name="M:ChipmunkBinding.SegmentQueryInfo.#ctor(ChipmunkBinding.Shape,ChipmunkBinding.Vect,ChipmunkBinding.Vect,System.Double)">
            <summary>
            Construct a Segment query info.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.SegmentQueryInfo.Equals(System.Object)">
            <summary>
            Return true if the given object is reference-equal to this one.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ChipmunkBinding.SegmentQueryInfo.op_Equality(ChipmunkBinding.SegmentQueryInfo,ChipmunkBinding.SegmentQueryInfo)">
            <summary>
            Return true if both objects are reference-equal to each other.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.SegmentQueryInfo.op_Inequality(ChipmunkBinding.SegmentQueryInfo,ChipmunkBinding.SegmentQueryInfo)">
            <summary>
            Return true if both objects are not reference-equal to each other.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.SegmentQueryInfo.FromQueryInfo(ChipmunkBinding.cpSegmentQueryInfo)">
            <summary>
            Create a SegmentQuery from a native struct cpSegmentQueryInfo.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.SegmentQueryInfo.Equals(ChipmunkBinding.SegmentQueryInfo)">
            <summary>
            Return true if the fields in both objects are equivalent and the <see cref="F:ChipmunkBinding.SegmentQueryInfo.alpha"/>
            field is within <see cref="F:System.Single.Epsilon"/> of the other's.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.SegmentQueryInfo.GetHashCode">
            <summary>
            Get the hash code.
            </summary>
        </member>
        <member name="T:ChipmunkBinding.ShapeFilter">
            <summary>
            Chipmunk has two primary means of ignoring collisions: groups and category masks. Groups are
            used to ignore collisions between parts on a complex object. A ragdoll is a good example.
            When jointing an arm onto the torso, you’ll want to allow them to overlap, which groups are
            good for. Shapes that have the same group don’t generate collisions, so by placing all of
            the shapes in a ragdoll in the same group, you’ll prevent it from colliding against other
            parts of itself. Category masks allow you to mark which categories an object belongs to and
            which categories it collides with. For example, a game has four collision categories: player
            (0), enemy (1), player bullet (2), and enemy bullet (3). Players and enemies shouldn't
            collide with their own bullets, and bullets shouldn't collide with other bullets. However,
            players collide with enemy bullets, and enemies collide with player bullets.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.ShapeFilter.Group">
            <summary>
            Get the shape filter group.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.ShapeFilter.Categories">
            <summary>
            Get the shape filter category.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.ShapeFilter.Mask">
            <summary>
            Get the shape filter mask.
            </summary>
        </member>
        <member name="T:ChipmunkBinding.ShapeFilter.Category">
            <summary>
            Category enum
            </summary>
        </member>
        <member name="F:ChipmunkBinding.ShapeFilter.Category.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:ChipmunkBinding.ShapeFilter.Category.All">
            <summary>
            All
            </summary>
        </member>
        <member name="P:ChipmunkBinding.ShapeFilter.All">
            <summary>
            Shape filter All
            </summary>
        </member>
        <member name="P:ChipmunkBinding.ShapeFilter.None">
            <summary>
            Shape filter None
            </summary>
        </member>
        <member name="M:ChipmunkBinding.ShapeFilter.#ctor(System.Int32,ChipmunkBinding.ShapeFilter.Category,ChipmunkBinding.ShapeFilter.Category)">
            <summary>
            Create a ShapeFilter.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.ShapeFilter.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a ShapeFilter with a group, category and mask.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.ShapeFilter.Equals(ChipmunkBinding.ShapeFilter)">
            <summary>
            Return true if the fields in both objects are equivalent.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.ShapeFilter.GetHashCode">
            <summary>
            Get the hash code.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.ShapeFilter.Equals(System.Object)">
            <summary>
            Return true if the fields in both objects are equivalent.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.ShapeFilter.op_Equality(ChipmunkBinding.ShapeFilter,ChipmunkBinding.ShapeFilter)">
            <summary>
            Return true if both objects are reference-equal or the fields in both objects are
            equivalent.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.ShapeFilter.op_Inequality(ChipmunkBinding.ShapeFilter,ChipmunkBinding.ShapeFilter)">
            <summary>
            Return true if both objects are not reference-equal or the fields in both objects are
            equivalent.
            </summary>
        </member>
        <member name="T:ChipmunkBinding.Space">
            <summary>
            Spaces in Chipmunk are the basic unit of simulation. You add rigid bodies, shapes, and
            constraints to the space and then step them all forward through time together.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Space.Handle">
            <summary>
            Native handle cpSpace.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Space.#ctor">
            <summary>
            Create a new Space object.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Space.#ctor(System.IntPtr)">
            <summary>
            Create a space from a native Handle (used by derived classes).
            </summary>
            <param name="handle"></param>
        </member>
        <member name="M:ChipmunkBinding.Space.Free">
            <summary>
            Destroys and frees.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Space.FreeSpace(System.IntPtr)">
            <summary>
            Destroy and free space.
            </summary>
            <param name="handle"></param>
        </member>
        <member name="M:ChipmunkBinding.Space.Dispose(System.Boolean)">
            <summary>
            Destroy and free space.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Space.Dispose">
            <summary>
            Disposes the Space object.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Space.FromHandle(System.IntPtr)">
            <summary>
            Get a Space object from native cpSpace handle.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Space.FromHandleSafe(System.IntPtr)">
            <summary>
            Get a Space object from native cpSpace handle, but return null if the handle is 0.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Space.Iterations">
            <summary>
            Number of iterations to use in the impulse solver to solve contacts and other
            constraints.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Space.Gravity">
            <summary>
            Gravity to pass to rigid bodies when integrating velocity. 
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Space.Damping">
            <summary>
            Damping rate expressed as the fraction of velocity that bodies retain each second. A
            value of 0.9 would mean that each body's velocity will drop 10% per second. The default
            value is 1.0, meaning no damping is applied. Note: This damping value is different than
            those of <see cref="T:ChipmunkBinding.DampedSpring"/> and <see cref="T:ChipmunkBinding.DampedRotarySpring"/>.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Space.IdleSpeedThreshold">
            <summary>
            Speed threshold for a body to be considered idle. The default value of 0 means to let
            the space guess a good threshold based on gravity. 
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Space.SleepTimeThreshold">
            <summary>
            Time a group of bodies must remain idle in order to fall asleep. Enabling sleeping also
            implicitly enables the the contact graph. The default value of infinity disables the
            sleeping algorithm. 
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Space.CollisionSlop">
            <summary>
            Amount of encouraged penetration between colliding shapes. This is used to reduce
            oscillating contacts and keep the collision cache warm. Defaults to 0.1. If you have
            poor simulation quality, increase this number as much as possible without allowing
            visible amounts of overlap. 
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Space.CollisionBias">
            <summary>
            Determines how fast overlapping shapes are pushed apart.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Space.CollisionPersistence">
            <summary>
            Number of frames that contact information should persist. Defaults to 3. There is
            probably never a reason to change this value.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Space.StaticBody">
            <summary>
            The Space provided static body for a given <see cref="T:ChipmunkBinding.Space"/>.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Space.CurrentTimeStep">
            <summary>
            Returns the current (or most recent) time step used with the given space.
            Useful from callbacks if your time step is not a compile-time global.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Space.IsLocked">
            <summary>
            Returns true from inside a callback when objects cannot be added/removed.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Space.GetOrCreateDefaultCollisionHandler``1">
            <summary>
            Create or return the existing collision handler that is called for all collisions that are
            not handled by a more specific collision handler.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Space.GetOrCreateDefaultCollisionHandler">
            <summary>
            Create or return the existing collision handler that is called for all collisions that are
            not handled by a more specific collision handler.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Space.GetOrCreateCollisionHandler``1(System.Int32,System.Int32)">
            <summary>
            Create or return the existing collision handler for the specified pair of collision
            types. If wildcard handlers are used with either of the collision types, it's the
            responsibility of the custom handler to invoke the wildcard handlers.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Space.GetOrCreateCollisionHandler(System.Int32,System.Int32)">
            <summary>
            Create or return the existing collision handler for the specified pair of collision
            types. If wildcard handlers are used with either of the collision types, it's the
            responsibility of the custom handler to invoke the wildcard handlers.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Space.GetOrCreateWildcardHandler``1(System.Int32)">
            <summary>
            Create or return the existing wildcard collision handler for the specified type.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Space.GetOrCreateWildcardHandler(System.Int32)">
            <summary>
            Create or return the existing wildcard collision handler for the specified type.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Space.AddShape(ChipmunkBinding.Shape)">
            <summary>
            Add a collision shape to the simulation.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Space.AddBody(ChipmunkBinding.Body)">
            <summary>
            Add a rigid body to the simulation. 
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Space.AddConstraint(ChipmunkBinding.Constraint)">
            <summary>
            Add a constraint to the simulation.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Space.RemoveShape(ChipmunkBinding.Shape)">
            <summary>
            Remove a collision shape from the simulation.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Space.RemoveBody(ChipmunkBinding.Body)">
            <summary>
            Remove a rigid body from the simulation.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Space.RemoveConstraint(ChipmunkBinding.Constraint)">
            <summary>
            Remove a constraint from the simulation.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Space.Contains(ChipmunkBinding.Shape)">
            <summary>
            Test if a collision shape has been added to the space.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Space.Contains(ChipmunkBinding.Body)">
            <summary>
            Test if a rigid body has been added to the space.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Space.Contains(ChipmunkBinding.Constraint)">
            <summary>
            Test if a constraint has been added to the space.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Space.AddPostStepCallback(System.Action{ChipmunkBinding.Space,System.Object,System.Object},System.Object,System.Object)">
            <summary>
            Schedule a post-step callback to be called when <see cref="M:ChipmunkBinding.Space.Step(System.Double)"/> finishes. You can
            only register one callback per unique value for <paramref name="key"/>. Returns true
            only if <paramref name="key"/> has never been scheduled before. It's possible to pass
            null for <paramref name="callback"/> if you only want to mark <paramref name="key"/> as
            being used.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Space.PointQuery(ChipmunkBinding.Vect,System.Double,ChipmunkBinding.ShapeFilter)">
            <summary>
            Get the shapes within a radius of the point location that are part of this space. The
            filter is applied to the query and follows the same rules as the collision detection.
            If a maxDistance of 0.0 is used, the point must lie inside a shape. Negative
            <paramref name="maxDistance"/> is also allowed meaning that the point must be a under a
            certain depth within a shape to be considered a match.
            </summary>
            <param name="point">Where to check for shapes in the space.</param>
            <param name="maxDistance">Match only within this distance.</param>
            <param name="filter">Only pick shapes matching the filter.</param>
        </member>
        <member name="M:ChipmunkBinding.Space.PointQueryNearest(ChipmunkBinding.Vect,System.Double,ChipmunkBinding.ShapeFilter)">
            <summary>
            Get the nearest shape within a radius of a point that is part of this space. The filter
            is applied to the query and follows the same rules as the collision detection. If a
            <paramref name="maxDistance"/> of 0.0 is used, the point must lie inside a shape.
            Negative <paramref name="maxDistance"/> is also allowed, meaning that the point must be
            under a certain depth within a shape to be considered a match.
            </summary>
            <param name="point">Where to check for collision in the space.</param>
            <param name="maxDistance">Match only within this distance.</param>
            <param name="filter">Only pick shapes matching the filter.</param>
        </member>
        <member name="M:ChipmunkBinding.Space.SegmentQuery(ChipmunkBinding.Vect,ChipmunkBinding.Vect,System.Double,ChipmunkBinding.ShapeFilter)">
            <summary>
            Get the shapes within a capsule-shaped radius of a line segment that is part of this
            space. The filter is applied to the query and follows the same rules as the collision
            detection.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Space.SegmentQueryFirst(ChipmunkBinding.Vect,ChipmunkBinding.Vect,System.Double,ChipmunkBinding.ShapeFilter)">
            <summary>
            Get the first shape within a capsule-shaped radius of a line segment that is part of
            this space. The filter is applied to the query and follows the same rules as the
            collision detection.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Space.BoundBoxQuery(ChipmunkBinding.BoundingBox,ChipmunkBinding.ShapeFilter)">
            <summary>
            Get all shapes within the axis-aligned bounding box that are part of this shape. The
            filter is applied to the query and follows the same rules as the collision detection.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Space.Bodies">
            <summary>
            Get all bodies in the space.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Space.Shapes">
            <summary>
            Get all shapes in the space.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Space.ShapeQuery(ChipmunkBinding.Shape)">
            <summary>
            Get all shapes in the space that are overlapping the given shape.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Space.Constraints">
            <summary>
            Get all constraints in the space.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Space.ReindexStatic(ChipmunkBinding.Shape)">
            <summary>
            Update the collision detection info for the static shapes in the space.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Space.ReindexShape(ChipmunkBinding.Shape)">
            <summary>
            Update the collision detection data for a specific shape in the space.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Space.ReindexShapesForBody(ChipmunkBinding.Body)">
            <summary>
            Update the collision detection data for all shapes attached to a body.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Space.UseSpatialHash(System.Double,System.Int32)">
            <summary>
            Switch the space to use a spatial hash as its spatial index.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Space.Step(System.Double)">
            <summary>
            Update the space for the given time step. Using a fixed time step is highly recommended.
            Doing so will increase the efficiency of the contact persistence, requiring an order of
            magnitude fewer iterations to resolve the collisions in the usual case. It is not the
            same to call step 10 times with a dt of 0.1, or 100 times with a dt of 0.01 even if the
            end result is that the simulation moved forward 100 units. Performing multiple calls
            with a smaller dt creates a more stable and accurate simulation. Therefore, it sometimes
            makes sense to have a little for loop around the step call.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Space.DebugDraw(ChipmunkBinding.IDebugDraw)">
            <summary>
            Draw all objects in the space for debugging purposes.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Space.DebugDraw(ChipmunkBinding.IDebugDraw,ChipmunkBinding.DebugDrawFlags)">
            <summary>
            Draw all objects in the space for debugging purposes using flags.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Space.DebugDraw(ChipmunkBinding.IDebugDraw,ChipmunkBinding.DebugDrawFlags,ChipmunkBinding.DebugDrawColors)">
            <summary>
            Draw all objects in the space for debugging purposes using flags and colors.
            </summary>
        </member>
        <member name="T:ChipmunkBinding.BoundingBox">
            <summary>
            Chipmunk's axis-aligned 2D bounding box type.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.BoundingBox.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a bounding box with the given coordinates.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.BoundingBox.Left">
            <summary>
            Left value of bounding box.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.BoundingBox.Bottom">
            <summary>
            Bottom value of bouding box.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.BoundingBox.Right">
            <summary>
            Right value of bouding box.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.BoundingBox.Top">
            <summary>
            Top value of bouding box.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.BoundingBox.Equals(ChipmunkBinding.BoundingBox)">
            <summary>
            Return true if the dimensions of both bounding boxes are equal to another (within
            <see cref="F:System.Single.Epsilon"/> distance of each other.)
            </summary>
        </member>
        <member name="M:ChipmunkBinding.BoundingBox.Equals(System.Object)">
            <summary>
            Return true if the given object is reference-equal.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.BoundingBox.GetHashCode">
            <summary>
            Get the bounding box hash code.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.BoundingBox.ToString">
            <summary>
            Return a string displaying coordinates formatted like (left, bottom, right, top).
            </summary>
        </member>
        <member name="M:ChipmunkBinding.BoundingBox.op_Equality(ChipmunkBinding.BoundingBox,ChipmunkBinding.BoundingBox)">
            <summary>
            Return true if the dimensions of both bounding boxes are within
            <see cref="F:System.Single.Epsilon"/> of each other.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.BoundingBox.op_Inequality(ChipmunkBinding.BoundingBox,ChipmunkBinding.BoundingBox)">
            <summary>
             Return true if the dimensions of both bounding boxes are not within
             <see cref="F:System.Single.Epsilon"/> of each other.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:ChipmunkBinding.DebugColor">
            <summary>
            RGBA channels as floats used to represent the color for debug drawing.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.DebugColor.Red">
            <summary>
            Red component in the RGBA color space.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.DebugColor.Green">
            <summary>
            Green component in the RGBA color space.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.DebugColor.Blue">
            <summary>
            Blue component in the RGBA color space.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.DebugColor.Alpha">
            <summary>
            Alpha component in the RGBA color space.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.DebugColor.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Create a <see cref="T:ChipmunkBinding.DebugColor"/> with the given color channel values.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.DebugColor.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Create a <see cref="T:ChipmunkBinding.DebugColor"/> with the given color channel values.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.DebugColor.Equals(System.Object)">
            <summary>
            Check if a <see cref="T:ChipmunkBinding.DebugColor"/> is equal to another object.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.DebugColor.Equals(ChipmunkBinding.DebugColor)">
            <summary>
            Check if a <see cref="T:ChipmunkBinding.DebugColor"/> is reference-equal to the other.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.DebugColor.GetHashCode">
            <summary>
            Get the hash code.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.DebugColor.ToString">
            <summary>
            Return a string formatted as "(R, G, B, A)".
            </summary>
        </member>
        <member name="M:ChipmunkBinding.DebugColor.op_Equality(ChipmunkBinding.DebugColor,ChipmunkBinding.DebugColor)">
            <summary>
            Return true if two <see cref="T:ChipmunkBinding.DebugColor"/> are reference-equal.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.DebugColor.op_Inequality(ChipmunkBinding.DebugColor,ChipmunkBinding.DebugColor)">
            <summary>
            Return true if two <see cref="T:ChipmunkBinding.DebugColor"/> are not reference-equal.
            </summary>
        </member>
        <member name="F:ChipmunkBinding.cpSpaceDebugDrawOptions.drawCircle">
            <summary>
            Function that will be invoked to draw circles.
            </summary>
        </member>
        <member name="F:ChipmunkBinding.cpSpaceDebugDrawOptions.drawSegment">
            <summary>
            Function that will be invoked to draw line segments.
            </summary>
        </member>
        <member name="F:ChipmunkBinding.cpSpaceDebugDrawOptions.drawFatSegment">
            <summary>
            Function that will be invoked to draw thick line segments.
            </summary>
        </member>
        <member name="F:ChipmunkBinding.cpSpaceDebugDrawOptions.drawPolygon">
            <summary>
            Function that will be invoked to draw convex polygons.
            </summary>
        </member>
        <member name="F:ChipmunkBinding.cpSpaceDebugDrawOptions.drawDot">
            <summary>
            Function that will be invoked to draw dots.
            </summary>
        </member>
        <member name="F:ChipmunkBinding.cpSpaceDebugDrawOptions.flags">
            <summary>
            Flags that request which things to draw (collision shapes, constraints, contact points).
            </summary>
        </member>
        <member name="F:ChipmunkBinding.cpSpaceDebugDrawOptions.shapeOutlineColor">
            <summary>
            Outline color passed to the drawing function.
            </summary>
        </member>
        <member name="F:ChipmunkBinding.cpSpaceDebugDrawOptions.colorForShape">
            <summary>
            Function that decides what fill color to draw shapes using.
            </summary>
        </member>
        <member name="F:ChipmunkBinding.cpSpaceDebugDrawOptions.constraintColor">
            <summary>
            Color passed to drawing functions for constraints.
            </summary>
        </member>
        <member name="F:ChipmunkBinding.cpSpaceDebugDrawOptions.collisionPointColor">
            <summary>
            Color passed to drawing functions for collision points.
            </summary>
        </member>
        <member name="F:ChipmunkBinding.cpSpaceDebugDrawOptions.data">
            <summary>
            User defined context pointer passed to all of the callback functions as the 'data' argument.
            </summary>
        </member>
        <member name="T:ChipmunkBinding.Transform">
            <summary>
            Type used for 2x3 affine transforms. See wikipedia for details:
            http://en.wikipedia.org/wiki/Affine_transformation. The properties map to the matrix in this
            way: [[a  c   tx], [b  d   ty]]. We can't use System.Numerics.Matrix32 since it does't use
            doubles.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Transform.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a matrix transformation.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Transform.CreateTranspose(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a transpose matrix.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Transform.CreateTranslation(ChipmunkBinding.Vect)">
            <summary>
            Create a translation matrix.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Transform.Identity">
            <summary>
            Create an identity matrix.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Transform.A">
            <summary>
            A
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Transform.B">
            <summary>
            B
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Transform.C">
            <summary>
            C
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Transform.D">
            <summary>
            D
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Transform.Tx">
            <summary>
            Tx
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Transform.Ty">
            <summary>
            Ty
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Transform.Equals(System.Object)">
            <summary>
            Return true if all matrix values are within <see cref="F:System.Single.Epsilon"/> of each other.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Transform.Equals(ChipmunkBinding.Transform)">
            <summary>
            Return true if all matrix values are within <see cref="F:System.Single.Epsilon"/> of each other.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Transform.GetHashCode">
            <summary>
            Get the hash code.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Transform.ToString">
            <summary>
            Return a string formatted like "(a,b|c,d|tx,ty)".
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Transform.op_Equality(ChipmunkBinding.Transform,ChipmunkBinding.Transform)">
            <summary>
            Return true if all matrix values are within <see cref="F:System.Single.Epsilon"/> of each other.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Transform.op_Inequality(ChipmunkBinding.Transform,ChipmunkBinding.Transform)">
            <summary>
            Return true if all matrix values are not within <see cref="F:System.Single.Epsilon"/> of each
            other.
            </summary>
        </member>
        <member name="T:ChipmunkBinding.Unsafe.CircleExtensions">
            <summary>
            Unsafe extension methods for the <see cref="T:ChipmunkBinding.Circle"/> shape.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Unsafe.CircleExtensions.SetRadius(ChipmunkBinding.Circle,System.Double)">
            <summary>
            Change the radius of the circle shape.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Unsafe.CircleExtensions.SetOffset(ChipmunkBinding.Circle,ChipmunkBinding.Vect)">
            <summary>
            Change the offset of the circle shape.
            </summary>
        </member>
        <member name="T:ChipmunkBinding.Unsafe.PolygonExtensions">
            <summary>
            Unsafe extension methods for the <see cref="T:ChipmunkBinding.Polygon"/> shape.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Unsafe.PolygonExtensions.SetVertexes(ChipmunkBinding.Polygon,ChipmunkBinding.Vect[],ChipmunkBinding.Transform)">
            <summary>
            Set the vertexes of the polygon.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Unsafe.PolygonExtensions.SetVertexes(ChipmunkBinding.Polygon,ChipmunkBinding.Vect[])">
            <summary>
            Set the vertexes of the polygon.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Unsafe.PolygonExtensions.SetRadius(ChipmunkBinding.Polygon,System.Double)">
            <summary>
            Set the radius of a poly shape 
            </summary>
            <param name="polygon"></param>
            <param name="radius"></param>
        </member>
        <member name="T:ChipmunkBinding.Unsafe.SegmentExtensions">
            <summary>
            Unsafe extensions methods for the <see cref="T:ChipmunkBinding.Segment"/> shape.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Unsafe.SegmentExtensions.SetEndpoints(ChipmunkBinding.Segment,ChipmunkBinding.Vect,ChipmunkBinding.Vect)">
            <summary>
            Set the endpoints of a segment shape. This mutates collision shapes. Chipmunk can't get
            velocity information on changing shapes, so the results will be unrealistic.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Unsafe.SegmentExtensions.SetRadius(ChipmunkBinding.Segment,System.Double)">
            <summary>
            Set the radius of a segment shape. This mutates collision shapes. Chipmunk can't get
            velocity information on changing shapes, so the results will be unrealistic.
            </summary>
        </member>
        <member name="T:ChipmunkBinding.Vect">
            <summary>
            2D Vector struct
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Vect.X">
            <summary>
            X value
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Vect.Y">
            <summary>
            Y value
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Vect.#ctor(System.Double,System.Double)">
            <summary>
            Create a vector.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:ChipmunkBinding.Vect.Equals(System.Object)">
            <summary>
            Return true if both objects are within <see cref="F:System.Single.Epsilon"/> of each other.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Vect.GetHashCode">
            <summary>
            Get the hash code.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Vect.Equals(ChipmunkBinding.Vect)">
            <summary>
            Return true if both objects are within <see cref="F:System.Single.Epsilon"/> of each other.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Vect.ToString">
            <summary>
            Return a string formatted like "(x,y)".
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Vect.op_Equality(ChipmunkBinding.Vect,ChipmunkBinding.Vect)">
            <summary>
            Return true if both objects are within <see cref="F:System.Single.Epsilon"/> of each other.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Vect.op_Inequality(ChipmunkBinding.Vect,ChipmunkBinding.Vect)">
            <summary>
            Return true if both objects are not within <see cref="F:System.Single.Epsilon"/> of each other.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Vect.op_Addition(ChipmunkBinding.Vect,ChipmunkBinding.Vect)">
            <summary>
            Add two vectors.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Vect.op_Subtraction(ChipmunkBinding.Vect,ChipmunkBinding.Vect)">
            <summary>
            Subtract two vectors.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Vect.op_UnaryNegation(ChipmunkBinding.Vect)">
            <summary>
            Negate a vector.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Vect.op_Multiply(ChipmunkBinding.Vect,System.Double)">
            <summary>
            Scalar multiplication.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Vect.op_Division(ChipmunkBinding.Vect,System.Double)">
            <summary>
            Scalar division.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Vect.op_Multiply(System.Double,ChipmunkBinding.Vect)">
            <summary>
            Scalar multiplication.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Vect.op_Division(System.Double,ChipmunkBinding.Vect)">
            <summary>
            Scalar division.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Vect.Dot(ChipmunkBinding.Vect)">
            <summary>
            Vector dot product.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Vect.Cross(ChipmunkBinding.Vect)">
            <summary>
            2D vector cross product analog. The cross product of 2D vectors results in a 3D vector
            with only a z component. This function returns the magnitude of the z value.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Vect.Perpendicurlar">
            <summary>
            Returns a perpendicular vector (-90 degree rotation).
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Vect.Project(ChipmunkBinding.Vect)">
            <summary>
            Returns the vector projection of v1 onto v2.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Vect.ForAngle(System.Double)">
            <summary>
            Returns the unit length vector for the given angle (in radians).
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Vect.ToAngle">
            <summary>
            Returns the angular direction v is pointing in (in radians).
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Vect.Rotate(ChipmunkBinding.Vect)">
            <summary>
            Uses complex number multiplication to rotate v1 by v2. Scaling will occur if v1 is not a
            unit vector.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Vect.Unrotate(ChipmunkBinding.Vect)">
            <summary>
            Inverse of Rotate().
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Vect.LengthSquared">
            <summary>
            Returns the squared length of v. Faster than <see cref="M:ChipmunkBinding.Vect.Length"/> when you only need to
            compare lengths.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Vect.Length">
            <summary>
            Returns the length of v.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Vect.Lerp(ChipmunkBinding.Vect,System.Double)">
            <summary>
            Linearly interpolate between this and <paramref name="v2"/>.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Vect.Normalize">
            <summary>
            Returns a normalized copy.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Vect.SLerp(ChipmunkBinding.Vect,System.Double)">
            <summary>
            Spherical linear interpolation between current position and <paramref name="v2"/> based
            on <paramref name="t"/>.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Vect.SLerpConst(ChipmunkBinding.Vect,System.Double)">
            <summary>
            Spherical linear interpolation between current position towards <paramref name="v2"/> by
            no more than angle <paramref name="a"/> radians.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Vect.Clamp(System.Double)">
            <summary>
            Clamp the magnitude to the given length.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Vect.LerpConst(ChipmunkBinding.Vect,System.Double)">
            <summary>
            Linearly interpolate between the current position towards <paramref name="v2"/> by
            distance <paramref name="d"/>.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Vect.Distance(ChipmunkBinding.Vect)">
            <summary>
            Return the distance between this and <paramref name="v2"/>.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Vect.DistanceSquare(ChipmunkBinding.Vect)">
            <summary>
            Return the squared distance between current position and <paramref name="v2"/>. Faster
            than <see cref="M:ChipmunkBinding.Vect.Distance(ChipmunkBinding.Vect)"/> when you only need to compare distances.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Vect.Near(ChipmunkBinding.Vect,System.Double)">
            <summary>
            Return true if the distance between current position and <paramref name="v2"/> is less
            than <paramref name="distance"/>.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Vect.Zero">
            <summary>
            (0, 0) Vector.
            </summary>
        </member>
        <member name="T:ChipmunkBinding.Arbiter">
            <summary>
            The <see cref="T:ChipmunkBinding.Arbiter"/> object encapsulates a pair of colliding shapes and all of the data
            about their collision.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Arbiter.Handle">
            <summary>
            Native handle of <see cref="T:ChipmunkBinding.Arbiter"/>.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Arbiter.Restitution">
            <summary>
            The restitution (elasticity) that will be applied to the pair of colliding objects.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Arbiter.Friction">
            <summary>
            Friction coefficient that will be applied to the pair of colliding objects.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Arbiter.SurfaceVelocity">
            <summary>
            The relative surface velocity of the two shapes in contact.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Arbiter.TotalImpulse">
            <summary>
            Calculate the total impulse including the friction that was applied by this arbiter.
            This function should only be called from a post-solve, post-step or cpBodyEachArbiter
            callback.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Arbiter.TotalKE">
            <summary>
            Calculate the amount of energy lost in a collision including static, but not dynamic friction.
            This function should only be called from a post-solve, post-step or cpBodyEachArbiter callback.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Arbiter.Ignore">
            <summary>
            Mark a collision pair to be ignored until the two objects separate. Pre-solve and
            post-solve callbacks will not be called, but the separate callback will be called.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Arbiter.GetShapes(ChipmunkBinding.Shape@,ChipmunkBinding.Shape@)">
            <summary>
            Return the colliding shapes involved for this arbiter. The order of their
            <see cref="P:ChipmunkBinding.Shape.CollisionType"/> values will match the order set when the collision
            handler was registered.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Arbiter.GetBodies(ChipmunkBinding.Body@,ChipmunkBinding.Body@)">
            <summary>
            Return the colliding bodies involved for this arbiter. The order of the
            <see cref="P:ChipmunkBinding.Shape.CollisionType"/> values the bodies are associated with will match the
            order set when the collision handler was registered.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Arbiter.ContactPointSet">
            <summary>
            The contact point set for an arbiter. This can be a very powerful feature, but use it
            with caution!
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Arbiter.Data">
            <summary>
            Arbitrary user data.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Arbiter.IsFirstContact">
            <summary>
            Returns true if this is the first step a pair of objects started colliding.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Arbiter.IsRemoval">
            <summary>
            Returns true if the separate callback is due to a shape being removed from the space.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Arbiter.Count">
            <summary>
            Get the number of contact points for this arbiter.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Arbiter.Normal">
            <summary>
            Get the normal of the collision.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Arbiter.GetPointA(System.Int32)">
            <summary>
            Get the position of the <paramref name="i"/>th contact point on the surface of the first
            shape.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Arbiter.GetPointB(System.Int32)">
            <summary>
            Get the position of the <paramref name="i"/>th contact point on the surface of the
            second shape.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Arbiter.GetDepth(System.Int32)">
            <summary>
            Get the depth (amount of overlap) of the <paramref name="i"/>th contact point.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Arbiter.CallWildcardBeginA(ChipmunkBinding.Space)">
            <summary>
            If you want a custom callback to invoke the wildcard callback for the first collision
            type, you must call this function explicitly. You must decide how to handle the
            wildcard's return value since it may disagree with the other wildcard handler's return
            value or your own.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Arbiter.CallWildcardBeginB(ChipmunkBinding.Space)">
            <summary>
            If you want a custom callback to invoke the wildcard callback for the second collision
            type, you must call this function explicitly. You must decide how to handle the
            wildcard's return value since it may disagree with the other wildcard handler's return
            value or your own.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Arbiter.CallWildcardPreSolveA(ChipmunkBinding.Space)">
            <summary>
            If you want a custom callback to invoke the wildcard callback for the first collision
            type, you must call this function explicitly. You must decide how to handle the
            wildcard's return value since it may disagree with the other wildcard handler's return
            value or your own.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Arbiter.CallWildcardPreSolveB(ChipmunkBinding.Space)">
            <summary>
            If you want a custom callback to invoke the wildcard callback for the second collision
            type, you must call this function explicitly. You must decide how to handle the
            wildcard's return value since it may disagree with the other wildcard handler's return
            value or your own.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Arbiter.CallWildcardPostSolveA(ChipmunkBinding.Space)">
            <summary>
            If you want a custom callback to invoke the wildcard callback for the first collision
            type, you must call this function explicitly.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Arbiter.CallWildcardPostSolveB(ChipmunkBinding.Space)">
            <summary>
            If you want a custom callback to invoke the wildcard callback for the second collision
            type, you must call this function explicitly.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Arbiter.CallWildcardSeparateA(ChipmunkBinding.Space)">
            <summary>
            If you want a custom callback to invoke the wildcard callback for the first collision
            type, you must call this function explicitly.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Arbiter.CallWildcardSeparateB(ChipmunkBinding.Space)">
            <summary>
            If you want a custom callback to invoke the wildcard callback for the second collision
            type, you must call this function explicitly.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Arbiter.Equals(ChipmunkBinding.Arbiter)">
            <summary>
            Return true if an arbiter is equal to another.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Arbiter.Equals(System.Object)">
            <summary>
            Check if an arbiter is equal to the given object.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Arbiter.ToString">
            <summary>
            Return the arbiter's handle prefixed by 'Handle: '.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Arbiter.GetHashCode">
            <summary>
            Get the hash code.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Arbiter.op_Equality(ChipmunkBinding.Arbiter,ChipmunkBinding.Arbiter)">
            <summary>
            Check if one arbiter is equal to another.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Arbiter.op_Inequality(ChipmunkBinding.Arbiter,ChipmunkBinding.Arbiter)">
            <summary>
            Check if one arbiter is inequal to another.
            </summary>
        </member>
        <member name="T:ChipmunkBinding.Shape">
            <summary>
            Abstract Chipmunk Shape
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Shape.#ctor(System.IntPtr)">
            <summary>
            Create a Shape with the given <paramref name="shapeHandle"/>.
            </summary>
            <param name="shapeHandle">The native shape handle.</param>
        </member>
        <member name="P:ChipmunkBinding.Shape.Handle">
            <summary>
            The native handle.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Shape.RegisterUserData">
            <summary>
            Register managed object in the native user data.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Shape.FromHandle(System.IntPtr)">
            <summary>
            Get a managed Shape from a native handle.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Shape.Dispose(System.Boolean)">
            <summary>
            Dispose the shape.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Shape.Free">
            <summary>
            Destroy and free the shape.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Shape.Dispose">
            <summary>
            Destroy and free the shape.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Shape.Space">
            <summary>
            Gets the space that this shape is registered within.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Shape.Body">
            <summary>
            The body that this shape is associated with.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Shape.Mass">
            <summary>
            Mass of the shape to have Chipmunk calculate mass properties for you.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Shape.Density">
            <summary>
            Density of the shape if you are having Chipmunk calculate mass properties for you.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Shape.Moment">
            <summary>
            Get the calculated moment of inertia for the shape.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Shape.Area">
            <summary>
            Get the calculated area of the shape.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Shape.CenterOfGravity">
            <summary>
            Get the center of gravity of the shape.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Shape.BoundingBox">
            <summary>
            Get the bounding box that contains the shape, given it's current position and angle.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Shape.Sensor">
            <summary>
            Whether the shape is a sensor.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Shape.Elasticity">
            <summary>
            The elasticity of the shape. A value of 0.0 is perfectly inelastic (no bounce). A
            value of 1.0 is perfectly elastic. Due to simulation inaccuracy, values of 1.0 or
            greater are not recommended.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Shape.Friction">
            <summary>
            The friction coefficient, following the Coulomb friction model. A value of 0.0 is
            frictionless. https://en.wikipedia.org/wiki/Friction#Coefficient_of_friction
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Shape.SurfaceVelocity">
            <summary>
             The surface velocity of the object. Useful for creating conveyor belts or players that
             move around. This value is only used when calculating friction, not resolving the
             collision.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Shape.CollisionType">
            <summary>
            An arbitrary value representing the collision type of this shape. Only shapes with like
            collision types will collide.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Shape.Filter">
            <summary>
            The collision <see cref="T:ChipmunkBinding.ShapeFilter"/> for the shape.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Shape.CacheBB">
            <summary>
            Update, cache and return the bounding box of a shape based on the body it's attached to.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Shape.Update(ChipmunkBinding.Transform)">
            <summary>
            Update, cache and return the bounding box of a shape with an explicit transformation.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Shape.PointQuery(ChipmunkBinding.Vect)">
            <summary>
            Finds the point on the surface of the shape which is closest to the given point.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Shape.SegmentQuery(ChipmunkBinding.Vect,ChipmunkBinding.Vect,System.Double)">
            <summary>
            Perform a segment query against a shape.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Shape.Collide(ChipmunkBinding.Shape)">
            <summary>
            Get the contact information between two shapes.
            </summary>
        </member>
        <member name="T:ChipmunkBinding.Constraint">
            <summary>
            Base class of all constraints.
            You usually don’t want to create instances of this class directly, but instead use one of
            the specific constraints such as the <see cref="T:ChipmunkBinding.PinJoint"/>.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Constraint.#ctor(System.IntPtr)">
            <summary>
            Construct a constraint with the given native handle.
            </summary>
            <param name="handle"></param>
        </member>
        <member name="P:ChipmunkBinding.Constraint.Handle">
            <summary>
            Native handle to constraint.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Constraint.RegisterUserData">
            <summary>
            Register managed object to native user data.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Constraint.FromHandle(System.IntPtr)">
            <summary>
            Get a Constraint object from a native handle.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Constraint.Dispose(System.Boolean)">
            <summary>
            Dispose the constraint.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Constraint.Free">
            <summary>
            Destroy and free the constraint.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.Constraint.Dispose">
            <summary>
            Destroy the constraint
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Constraint.Space">
            <summary>
            Get the cpSpace this constraint is added to.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Constraint.BodyA">
            <summary>
            Get the first body the constraint is attached to.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Constraint.BodyB">
            <summary>
            Get the second body the constraint is attached to.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Constraint.MaxForce">
            <summary>;
            The maximum force that this constraint is allowed to use.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Constraint.ErrorBias">
            <summary>
            Rate at which joint error is corrected.
            Defaults to pow(1.0 - 0.1, 60.0) meaning that it will
            correct 10% of the error every 1/60th of a second.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Constraint.MaxBias">
            <summary>
            The maximum rate at which joint error is corrected.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Constraint.CollideBodies">
            <summary>
            Whether the two bodies connected by the constraint are allowed to collide or not.
            
            When two bodies collide, Chipmunk ignores the collisions if this property is set to
            False on any constraint that connects the two bodies. Defaults to True. This can be
            used to create a chain that self-collides, but adjacent links in the chain do not collide.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Constraint.PreSolve">
            <summary>
            Pre-solve function that is called before the solver runs.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Constraint.PostSolve">
            <summary>
            Post-solve function that is called after the solver runs.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Constraint.Data">
            <summary>
            The user-definable data pointer for this constraint.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.Constraint.Impulse">
            <summary>
            Get the last impulse applied by this constraint.
            </summary>
        </member>
        <member name="T:ChipmunkBinding.CollisionHandler`1">
            <summary>
            A collision handler is a set of 4 function callbacks for the different collision events that
            Chipmunk recognizes. Collision callbacks are closely associated with <see cref="T:ChipmunkBinding.Arbiter"/>
            objects. You should familiarize yourself with those as well. Note #1: Shapes tagged as
            sensors (<see cref="P:ChipmunkBinding.Shape.Sensor"/> == true) never generate collisions that get processed,
            so collisions between sensor shapes and other shapes will never call the post_solve()
            callback. They still generate begin() and separate() callbacks, and the pre_solve() callback
            is also called every frame even though there is no collision response. Note #2: pre_solve()
            callbacks are called before the sleeping algorithm runs. If an object falls asleep, its
            post_solve() callback won’t be called until it’s re-awoken.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.CollisionHandler`1.Begin">
            <summary>
            This function is called when two shapes with types that match this collision handler begin colliding
            </summary>
        </member>
        <member name="P:ChipmunkBinding.CollisionHandler`1.PreSolve">
            <summary>
            This function is called each step when two shapes with types that match this collision
            handler are colliding. It's called before the collision solver runs so that you can
            affect a collision's outcome.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.CollisionHandler`1.PostSolve">
            <summary>
            This function is called each step when two shapes with types that match this collision
            handler are colliding. It's called after the collision solver runs so that you can read
            back information about the collision to trigger events in your game.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.CollisionHandler`1.Separate">
            <summary>
            This function is called when two shapes with types that match this collision handler
            stop colliding.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.CollisionHandler`1.Data">
            <summary>
            User definable context pointer that is passed to all of the collision handler functions.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.CollisionHandler`1.TypeA">
            <summary>
            In the collision handler callback, the shape with this type will be the first argument.
            Read only.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.CollisionHandler`1.TypeB">
            <summary>
            In the collision handler callback, the shape with this type will be the second argument.
            Read only.
            </summary>
        </member>
        <member name="T:ChipmunkBinding.RotaryLimitJoint">
            <summary>
            <see cref="T:ChipmunkBinding.RotaryLimitJoint"/> constrains the relative rotations of two bodies.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.RotaryLimitJoint.IsRotaryLimitJoint(ChipmunkBinding.Constraint)">
            <summary>
            Check if a constraint is a <see cref="T:ChipmunkBinding.RotaryLimitJoint"/>.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.RotaryLimitJoint.#ctor(ChipmunkBinding.Body,ChipmunkBinding.Body,System.Double,System.Double)">
            <summary>
            Constrains the relative rotations of two bodies.
            </summary>
            <param name="bodyA"></param>
            <param name="bodyB"></param>
            <param name="mininum">
            The minimum angular limit in radians. May be greater than 1 backwards revolution.
            </param>
            <param name="maximum">
            The maximum angular limit in radians. May be greater than 1 revolution.
            </param>
        </member>
        <member name="P:ChipmunkBinding.RotaryLimitJoint.Minimum">
            <summary>
            The minimum distance the joint will maintain between the two anchors.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.RotaryLimitJoint.Maximum">
            <summary>
            The maximum distance the joint will maintain between the two anchors.
            </summary>
        </member>
        <member name="T:ChipmunkBinding.RatchetJoint">
            <summary>
            <see cref="T:ChipmunkBinding.RatchetJoint"/> is a rotary ratchet, which works like a socket wrench.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.RatchetJoint.IsRatchetJoint(ChipmunkBinding.Constraint)">
            <summary>
            Check if a constraint is a <see cref="T:ChipmunkBinding.RatchetJoint"/>.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.RatchetJoint.#ctor(ChipmunkBinding.Body,ChipmunkBinding.Body,System.Double,System.Double)">
            <summary>
            Works like a socket wrench.
            </summary>
            <param name="bodyA">One of the two bodies to connect.</param>
            <param name="bodyB">One of the two bodies to connect.</param>
            <param name="phase">
            The initial offset to use when deciding where the ratchet angles are.
            </param>
            <param name="ratchet">
            The distance between "clicks" (following the socket wrench analogy).
            </param>
        </member>
        <member name="P:ChipmunkBinding.RatchetJoint.Angle">
            <summary>
            The angle of the current ratchet tooth.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.RatchetJoint.Phase">
            <summary>
            The phase offset of the ratchet.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.RatchetJoint.Rachet">
            <summary>
            The angular distance of each ratchet.
            </summary>
        </member>
        <member name="T:ChipmunkBinding.GearJoint">
            <summary>
            <see cref="T:ChipmunkBinding.GearJoint"/> keeps the angular velocity ratio of a pair of bodies constant.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.GearJoint.IsGearJoint(ChipmunkBinding.Constraint)">
            <summary>
            Check if a constraint is a <see cref="T:ChipmunkBinding.GearJoint"/>.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.GearJoint.#ctor(ChipmunkBinding.Body,ChipmunkBinding.Body,System.Double,System.Double)">
            <summary>
            Keeps the angular velocity ratio of a pair of bodies constant.
            </summary>
            <param name="bodyA">The first connected body.</param>
            <param name="bodyB">The second connected body.</param>
            <param name="phase">The seconded connected body.</param>
            <param name="ratio">
            Measured in absolute terms. It is currently not possible to set
            the ratio in relation to a third body’s angular velocity.
            </param>
        </member>
        <member name="P:ChipmunkBinding.GearJoint.Phase">
            <summary>
            The phase offset of the gears.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.GearJoint.Ratio">
            <summary>
            The ratio of a gear joint.
            </summary>
        </member>
        <member name="T:ChipmunkBinding.SimpleMotor">
            <summary>
            <see cref="T:ChipmunkBinding.SimpleMotor"/> keeps the relative angular velocity constant.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.SimpleMotor.IsSimpleMotor(ChipmunkBinding.Constraint)">
            <summary>
            Check if constraint is a <see cref="T:ChipmunkBinding.SimpleMotor"/>.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.SimpleMotor.#ctor(ChipmunkBinding.Body,ChipmunkBinding.Body,System.Double)">
            <summary>
            Rotate with a constant relative angular velocity constant between two bodies.
            </summary>
            <param name="bodyA">One of the two bodies.</param>
            <param name="bodyB">One of the two bodies.</param>
            <param name="rate">The rate of rotation.</param>
        </member>
        <member name="P:ChipmunkBinding.SimpleMotor.Rate">
            <summary>
            The rate of the motor.
            </summary>
        </member>
        <member name="T:ChipmunkBinding.HastySpace">
            <summary>
            Similar to <see cref="T:ChipmunkBinding.Space"/>, but with ARM NEON optimizations in the solver.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.HastySpace.#ctor">
            <summary>
            On ARM platforms that support NEON, this will enable the vectorized solver.
            <see cref="T:ChipmunkBinding.HastySpace"/> also supports multiple threads, but runs single threaded by
            default for determinism.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.HastySpace.Threads">
            <summary>
            The number of threads to use for the solver. Currently Chipmunk is limited to 2 threads
            as using more generally provides very minimal performance gains. Passing 0 as the thread
            count on iOS or OS X will cause Chipmunk to automatically detect the number of threads
            it should use. On other platforms passing 0 for the thread count will set 1 thread.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.HastySpace.Step(System.Double)">
            <summary>
            Step in the hasty space.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.HastySpace.FreeSpace(System.IntPtr)">
            <summary>
            Destroy and free the hasty space.
            </summary>
        </member>
        <member name="T:ChipmunkBinding.AutoGeometry">
            <summary>
            This class contains functions for automatic generation of geometry.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.AutoGeometry.MarchHard(ChipmunkBinding.MarchData)">
            <summary>
            Trace an aliased curve of an image along a particular threshold. The given number of
            samples will be taken and spread across the bounding box area using the sampling
            function and context. The segment function will be called for each segment detected that
            lies along the density contour for the threshold. Only the SegmentData and SampleData are
            optional.
            </summary>
        </member>
        <member name="M:ChipmunkBinding.AutoGeometry.MarchSoft(ChipmunkBinding.MarchData)">
            <summary>
            Trace an anti-aliased contour of an image along a particular threshold. The given number
            of samples will be taken and spread across the bounding box area using the sampling
            function and context. The segment function will be called for each segment detected that
            lies along the density contour for the threshold.
            </summary>
        </member>
        <member name="T:ChipmunkBinding.MarchData">
            <summary>
            March data used for <see cref="T:ChipmunkBinding.AutoGeometry"/>.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.MarchData.BoundingBox">
            <summary>
            The bounding box.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.MarchData.XSamples">
            <summary>
            The number of horizontal samples.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.MarchData.YSamples">
            <summary>
            The number of vertical samples.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.MarchData.Threshold">
            <summary>
            The threshold.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.MarchData.SampleFunction">
            <summary>
            Callback for sampling/
            </summary>
        </member>
        <member name="P:ChipmunkBinding.MarchData.SegmentFunction">
            <summary>
            Callback for segmentation.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.MarchData.SampleData">
            <summary>
            User sample data.
            </summary>
        </member>
        <member name="P:ChipmunkBinding.MarchData.SegmentData">
            <summary>
            User segmentation data.
            </summary>
        </member>
    </members>
</doc>
