pool:
  name: Hosted macOS
  demands: msbuild

steps:
- checkout: self
  submodules: 'true'

# Print the current version of Xcode
- task: CmdLine@2
  displayName: 'Show Xcode version'
  inputs:
    script: '/usr/bin/xcodebuild -version'


# Azure DevOps hosted pool is still using an old version of Xamarin.iOS, 
# so we will use the previous major version of Xcode
- task: CmdLine@2
  displayName: 'Provisioning Xamarin.iOS'
  inputs:
    script: 'cd ~;
            curl -O https://download.visualstudio.microsoft.com/download/pr/d11a42ff-dd11-4005-b5a8-799856a96aad/2893a2da0df8a2e2d45ea17e2be2ccce/xamarin.ios-13.4.0.2.pkg;
            sudo installer -pkg ~/xamarin.ios-13.4.0.2 -target /'

# Print the current version of Xamarin.iOS
- task: CmdLine@2
  displayName: 'Show Xamarin.iOS Version'
  inputs:
    script: '/Library/Frameworks/Xamarin.iOS.framework/Versions/Current/bin/mtouch --version'

- task: NuGetCommand@2
  displayName: 'NuGet restore'
  inputs:
    restoreSolution: ChipmunkBinding.sln

- task: NuGetCommand@2
  displayName: 'NuGet restore'
  inputs:
    restoreSolution: ChipmunkBinding.Core.sln

- task: NuGetCommand@2
  displayName: 'NuGet restore'
  inputs:
    restoreSolution: ChipmunkBinding.Mac.sln

- script: 'brew update'
  displayName: 'Brew Update'

- script: 'brew install gitversion --ignore-dependencies'
  displayName: 'Install GitVersion'

- task: PowerShell@2
  displayName: 'PowerShell Script'
  inputs:
    targetType: filePath
    filePath: ./devops/PreBuild.ps1
    arguments: 'ChipmunkBinding ChipmunkBinding.nuspec'

# Build .NET 4.5

- task: MSBuild@1
  displayName: 'Build solution ChipmunkBinding.sln'
  inputs:
    solution: ChipmunkBinding.sln
    configuration: Release

# Build .NET Core (to be sure works on macOS)

- task: MSBuild@1
  displayName: 'Build .NET Core'
  inputs:
    solution: ChipmunkBinding.Core.sln
    configuration: Release
    msbuildArguments: /restore

# Build Xamarin.Mac (macOS, watchOS, iOS, tvOS)

- task: MSBuild@1
  displayName: 'Build solution ChipmunkBinding.Mac.sln'
  inputs:
    solution: ChipmunkBinding.Mac.sln
    configuration: Release

# Build Desktop Demo - we will not run on the CI, but we don't want the demo to break
- task: NuGetCommand@2
  displayName: 'NuGet restore ChipmunkDemo.Desktop.sln'
  inputs:
    restoreSolution: ChipmunkDemo.Desktop.sln

- task: MSBuild@1
  displayName: 'Build Desktop Demo'
  inputs:
    solution: ChipmunkDemo.Desktop.sln
    configuration: Release

- task: NuGetCommand@2
  displayName: 'NuGet restore ChipmunkDemo.iOS.sln'
  inputs:
    restoreSolution: ChipmunkDemo.iOS.sln

- task: MSBuild@1
  displayName: 'Build iOS Demo'
  inputs:
    solution: ChipmunkDemo.iOS.sln
    configuration: Release

- task: NuGetCommand@2
  displayName: 'NuGet restore ChipmunkDemo.Android.sln'
  inputs:
    restoreSolution: ChipmunkDemo.Android.sln

- task: MSBuild@1
  displayName: 'Build Android Demo'
  inputs:
    solution: ChipmunkDemo.Android.sln
    configuration: Release

# Run tests

- task: DotNetCoreCLI@2
  displayName: 'dotnet vstest'
  inputs:
    command: custom
    custom: vstest
    arguments: './tests/build/netcore/bin/Release/netcoreapp2.0/ChipmunkBindingTest.dll'

- script: 'mono packages/NUnit.ConsoleRunner.3.10.0/tools/nunit3-console.exe ./tests/build/net45/bin/Release/ChipmunkBindingTest.dll --result=TEST-Result-Mac.xml'
  displayName: 'Run OSX tests'

- task: PublishTestResults@2
  displayName: 'Publish Mac Test Results TEST-Result-Mac.xml'
  inputs:
    testResultsFormat: NUnit
    testResultsFiles: 'TEST-Result-Mac.xml'

- task: MSBuild@1
  displayName: 'Run iOS tests'
  inputs:
    solution: tests/build/xamarinios/ChipmunkBindingTest.XamariniOS.csproj
    platform: iPhoneSimulator
    configuration: Release
    msbuildArguments: '/t:RunSimulatorTests'

- task: PublishTestResults@2
  displayName: 'Publish iOS Test Results TEST-Result-iOS.xml'
  inputs:
    testResultsFormat: NUnit
    testResultsFiles: 'tests/build/xamarinios/TEST-Result-Xamarin.iOS.xml'

- task: MSBuild@1
  displayName: 'Run tvOS tests'
  inputs:
    solution: tests/build/xamarintvos/ChipmunkBindingTest.XamarinTVOS.csproj
    platform: iPhoneSimulator
    configuration: Release
    msbuildArguments: '/t:RunSimulatorTests'

- task: PublishTestResults@2
  displayName: 'Publish tvOS Test Results TEST-Result-tvOS.xml'
  inputs:
    testResultsFormat: NUnit
    testResultsFiles: 'tests/build/xamarintvos/TEST-Result-Xamarin.TVOS.xml'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: Xamarin.iOS.ChipmunkBinding.dll'
  inputs:
    PathtoPublish: lib/Release/xamarinios/ChipmunkBinding.dll
    ArtifactName: Xamarin.iOS.ChipmunkBinding.dll

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: Xamarin.tvOS.ChipmunkBinding.dll'
  inputs:
    PathtoPublish: lib/Release/xamarintvos/ChipmunkBinding.dll
    ArtifactName: Xamarin.tvOS.ChipmunkBinding.dll

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: Xamarin.watchOS.ChipmunkBinding.dll'
  inputs:
    PathtoPublish: lib/Release/xamarinwatchos/ChipmunkBinding.dll
    ArtifactName: Xamarin.watchOS.ChipmunkBinding.dll

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: Xamarin.Mac.ChipmunkBinding.dll'
  inputs:
    PathtoPublish: lib/Release/xamarinmac/ChipmunkBinding.dll
    ArtifactName: Xamarin.Mac.ChipmunkBinding.dll

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: libchipmunk.dylib'
  inputs:
    PathtoPublish: runtimes/osx/native/libchipmunk.dylib
    ArtifactName: libchipmunk.dylib

- task: TriggerBuild@3
  displayName: 'Trigger a new build of ChipmunkBinding.Linux'
  inputs:
    buildDefinition: 'ChipmunkBinding.Linux'
    ignoreSslCertificateErrors: true
    useSameSourceVersion: true
    password: '$(myToken)'

- task: SendTelegramNotification@0
  condition: in(variables['Agent.JobStatus'], 'SucceededWithIssues')
  inputs:
    botToken: '$(botToken)'
    chats: '$(chatId)'
    taskStatus: false
    message: |
            ⚠️ <b>Warning!</b>  <a href="$(Build.Repository.Uri)">$(Build.DefinitionName)</a> (<code>$(Build.SourceBranchName)</code>)
            <pre>$(Build.SourceVersion)</pre>
            $(Build.SourceVersionMessage) by $(Build.QueuedBy)

- task: SendTelegramNotification@0
  condition: in(variables['Agent.JobStatus'], 'Failed')
  inputs:
    botToken: '$(botToken)'
    chats: '$(chatId)'
    taskStatus: false
    buildQueuedBy: false
    message: |
            ❌ <b>Fail!</b>  <a href="$(Build.Repository.Uri)">$(Build.DefinitionName)</a> (<code>$(Build.SourceBranchName)</code>)
            <pre>$(Build.SourceVersion)</pre>
            $(Build.SourceVersionMessage) by $(Build.QueuedBy)

- task: SendTelegramNotification@0
  condition: in(variables['Agent.JobStatus'], 'Succeeded')
  inputs:
    botToken: '$(botToken)'
    chats: '$(chatId)'
    taskStatus: false
    buildQueuedBy: false
    message: |
            ✅ <b>Success!</b>  <a href="$(Build.Repository.Uri)">$(Build.DefinitionName)</a> (<code>$(Build.SourceBranchName)</code>)
            <pre>$(Build.SourceVersion)</pre>
            $(Build.SourceVersionMessage) by $(Build.QueuedBy)

# 
